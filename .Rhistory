z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <-  if(x < 3) {
NA
} else {
10
}
y
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- (z - 1)^.5
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf < num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("my", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Randy")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep + "-")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x* 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
/0
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[x(0)]
x[x(1)]
x[0]
x[1000]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow =4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
ny_data
my_data
new_counter <- function() {
i <- 0
for (j in 1:10) {
function() {
# do something useful, then ...
i <<- i + 1
i
}
}
}
i
counter_one <- new_counter()
counter_one
counter_two <- new_counter()
counter_two
i
counter_one <- new_counter()
counter_one
counter_two <- new_counter()
counter_two
counter_one <- new_counter()
counter_one
counter_two <- new_counter()
counter_two
i <- 0
counter_one <- new_counter()
counter_one
counter_two <- new_counter()
counter_two
i <- 0
counter_one <- new_counter()
counter_one
counter_two <- new_counter()
counter_two
?return
t <- function() {
return(100)
}
try <- t()
try
new_counter <- function() {
i <- 0
function() {
# do something useful, then ...
i <<- i + 1
i
}
}
counter_one <- new_counter()
counter_one
counter_two <- new_counter()
counter_two
r<- function() {
it <<- it + 1
it
}
t <- function() {
it <- 0
r()
#return(100)
}
try <- t()
try
make.accumulator<-function(){
a <- 0
function(x) {
a <<- a + x
a
}
}
> f<-make.accumulator()
> f(1)
f<-make.accumulator()
f(1)
f(1)
f(10)
list(set = set, get = get, setmean = setmean, getmean = getmean)
set <- 1
get <- 2
setmean <- "a"
getmean <- "b"
list(set = set, get = get, setmean = setmean, getmean = getmean)
set <- 1
get <- 2
setmean <- "a"
getmean <- "b"
z <- list(set = set, get = get, setmean = setmean, getmean = getmean)
z
z$getmean
mean(c(1:10))
mean(c(1:9))
mean(1:9)
x <- c(1:10)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
e <- cachemean(x)
yt <- c(1:10)
e <- cachemean(yt)
e
et <- Makevector(yt)
et <- makeVector(yt)
e <- cachemean(yt)
x
rm(x)
x
et <- makeVector(yt)
x
et
x <- makeVector(yt)
x
e <- cachemean(yt)
y <- c(1:10)
x <- makeVector(y)
x
e <- cachemean(y)
e
class(x)
v <- makeVector(1:20)
class(v)
v
e <- cachemean(v)
e
e <- cachemean(v)
e
x <- matrix(rnorm(200), 20, 10)
x
apply(x, 2, mean)
x
apply(x, 1, sum)
360 * 360
library(datasets)
data(iris)
?iris
head(iris)
?split
x <- split(iris, iris$species)
x <- split(iris, iris$Species)
x
head(x)
x$virginica
mean(x$virginica[1])
mean(x$virginica)
mean(x$virginica[[1]])
apply(iris, 1, mean)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
debug(ls)
set.seed(1)
rpois(5, 2)
?rnorm
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
Plot(x,y)
Plot(y)
# Define the cars vector with 5 values
cars <- c(1, 3, 6, 4, 9)
# Graph the cars vector with all defaults
plot(cars)
# Define the cars vector with 5 values
cars <- c(1, 3, 6, 4, 9)
# Graph the cars vector with all defaults
plot(cars)
undebug(ls)
# Define the cars vector with 5 values
cars <- c(1, 3, 6, 4, 9)
# Graph the cars vector with all defaults
plot(cars)
attach(mtcars)
plot(wt, mpg)
abline(lm(mpg~wt))
title("Regression of MPG on Weight")
q
q
c
c
c
q
q
q
q
state <- "MD"
outcome <- "heart attach"
num <- "worst"
mastFrame <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
setwd("~/Coursera_R_Programming_Jul2014/Week4/ProgAssgn3_Hospital")
mastFrame <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
mastFrame[ , 11] <- as.numeric(mastFrame[ , 11], na.rm = TRUE)
mastFrame[ , 17] <- as.numeric(mastFrame[ , 17], na.rm = TRUE)
mastFrame[ , 23] <- as.numeric(mastFrame[ , 23], na.rm = TRUE)
## Check that state and outcome are valid
valState <- state == state.abb  ## sum of vector will be one (1) if valid, else zero
if (sum(valState) != 1) stop("invalid state")
valOutcomeVec <- c("heart attack", "heart failure", "pneumonia")
valOutcome <- outcome == valOutcomeVec
if (sum(valOutcome) != 1) stop("invalid outcome")
## Return hospital name in that state with the given rank
## 30-day death rate
## extract subset for state
subsetFrame <- subset(mastFrame, mastFrame[ ,7] == state)
## sort the subset frame on the requested outcome
#valOutcome
if (valOutcome[1]) {
colNr <- 11
} else {
if (valOutcome[2]) {
colNr <- 17
} else colNr <- 23
## Have already determined that the 'outome' input parameter is valid,
## so if not one of the first two, then has to be the third column
}
## sort the subset by outcome and hospital name
subsetOrdered <- subsetFrame[order(subsetFrame[colNr], subsetFrame[2]),]
## check for validity of 'num' (has to be between 1 and number of rows in
## the subset), and set row to the desired rank position
#num <- 371
if (num == "best") {
row <- 1
} else {
if(num == "worst") {
row <- nrow(subsetOrdered)  ## set the row to the last entry in df
} else {
if (num > nrow(subsetOrdered)) {
return ("NA")
} else {
row <- num
}
}
}
tail(subsetOrdered)
outcome <- "heart attack"
mastFrame <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = "Not Available")
## in read above, need to strip out the 'Not Available' entries in the
## that need to contain only numeric data, else it will throw a warning
## message when calling the function
## convert columns from character to numeric for correct processing
mastFrame[ , 11] <- as.numeric(mastFrame[ , 11], na.rm = TRUE)
mastFrame[ , 17] <- as.numeric(mastFrame[ , 17], na.rm = TRUE)
mastFrame[ , 23] <- as.numeric(mastFrame[ , 23], na.rm = TRUE)
## Check that state and outcome are valid
valState <- state == state.abb  ## sum of vector will be one (1) if valid, else zero
if (sum(valState) != 1) stop("invalid state")
valOutcomeVec <- c("heart attack", "heart failure", "pneumonia")
valOutcome <- outcome == valOutcomeVec
if (sum(valOutcome) != 1) stop("invalid outcome")
## Return hospital name in that state with the given rank
## 30-day death rate
## extract subset for state
subsetFrame <- subset(mastFrame, mastFrame[ ,7] == state)
## sort the subset frame on the requested outcome
#valOutcome
if (valOutcome[1]) {
colNr <- 11
} else {
if (valOutcome[2]) {
colNr <- 17
} else colNr <- 23
## Have already determined that the 'outome' input parameter is valid,
## so if not one of the first two, then has to be the third column
}
## sort the subset by outcome and hospital name
subsetOrdered <- subsetFrame[order(subsetFrame[colNr], subsetFrame[2]),]
## check for validity of 'num' (has to be between 1 and number of rows in
## the subset), and set row to the desired rank position
#num <- 371
if (num == "best") {
row <- 1
} else {
if(num == "worst") {
row <- nrow(subsetOrdered)  ## set the row to the last entry in df
} else {
if (num > nrow(subsetOrdered)) {
return ("NA")
} else {
row <- num
}
}
}
tail(subsetOrdered)
help("order")
subsetOrdered <- subsetFrame[order(subsetFrame[colNr], subsetFrame[2]),na.last = NA]
subsetOrdered <- subsetFrame[order(subsetFrame[colNr], subsetFrame[2],na.last = NA,)]
subsetOrdered <- subsetFrame[order(subsetFrame[colNr], subsetFrame[2]),na.last = NA,]
subsetOrdered <- subsetFrame[order(subsetFrame[colNr], subsetFrame[2]) na.last = NA,]
subsetOrdered <- subsetFrame[order(subsetFrame[colNr], subsetFrame[2], na.last = NA)]
if (num == "best") {
row <- 1
} else {
if(num == "worst") {
row <- nrow(subsetOrdered)  ## set the row to the last entry in df
} else {
if (num > nrow(subsetOrdered)) {
return ("NA")
} else {
row <- num
}
}
}
tail(subsetOrdered)
tail(subsetOrdered)
head(subsetOrdered)
subsetOrdered <- subsetFrame[order(subsetFrame[colNr], subsetFrame[2]),]
if (num == "best") {
row <- 1
} else {
if(num == "worst") {
row <- nrow(subsetOrdered)  ## set the row to the last entry in df
} else {
if (num > nrow(subsetOrdered)) {
return ("NA")
} else {
row <- num
}
}
}
head(subsetOrdered)
tail(subsetOrdered)
help("na.omit)
help("na.omit")
help("na.omit")
subsetOrdered1 <- na.omit(subsetOrdered)
if (num == "best") {
row <- 1
} else {
if(num == "worst") {
row <- nrow(subsetOrdered)  ## set the row to the last entry in df
} else {
if (num > nrow(subsetOrdered)) {
return ("NA")
} else {
row <- num
}
}
}
tail(subsetOrdered)
tail(subsetOrdered1)
source('~/Coursera_R_Programming_Jul2014/Week4/ProgAssgn3_Hospital/rankhospital.R')
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
source('~/Coursera_R_Programming_Jul2014/Week4/ProgAssgn3_Hospital/rankhospital.R')
